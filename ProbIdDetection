from utility import RequestUtil, FileProcess
import time
from utility import TestFunctionImport
from utility.TestFunctionImport1 import *
class ProbIdDetection:
    def skipToSpecifiedIntervalDay(slef ,skipDays_int, formart):
        return time.strftime(formart, time.localtime(time.time() + 86400 * skipDays_int))

    def crawlScheduleInfo(slef, baseNum, serviceId, block, pageNum):
        oAuthReqeuest = RequestUtil('6128e4ec8e45ec08a34e0a8ffefca499e751f874ecde95d9a4fa3aa0e1fe865b',
                                    '3df549cdf08d8822ba58d3371e9c09540a875a6dff163c67121469ddcfaf30da')
        if baseNum == 10:
            day = slef.skipToSpecifiedIntervalDay(0, '%Y-%m-%d')
            url = 'http://cloud.rovicorp.com/data/2/2.4/lookup/service/'+str(serviceId)+';offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR/schedule/' + day + '?page=' + str(
                pageNum) + '&size=10&duration=4&block=' + str(block)

            return oAuthReqeuest.doRequestWithOAuth1(url)

        elif baseNum == 50:
            day = slef.skipToSpecifiedIntervalDay(0, '%Y-%m-%d')
            url = 'http://cloud.rovicorp.com/data/2/2.4/lookup/service/'+str(serviceId)+';offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR/schedule/' + day + '?page=' + str(
                pageNum) + '&size=50&duration=6&block=' + str(block)

            return oAuthReqeuest.doRequestWithOAuth1(url)

    def crawlProbIdInfo(self, contentId, stationId):
        url = 'https://tcl-staging-admin-0.digitalsmiths.net:443/sd/tcl/taps/findId?fl=*&limit=10&offset=0&rcsGroupId='+ str(contentId) +'&stationId=' + 'st-' + str(stationId)
        #url = "https://tcl-staging-admin-0.digitalsmiths.net:443/sd/tcl/taps/findId?fl=*&limit=10&offset=0"
        return RequestUtil.doRequestByHttps(url)

    def crawAiringInfo(self, airingId):
        oAuthReqeuest = RequestUtil('6128e4ec8e45ec08a34e0a8ffefca499e751f874ecde95d9a4fa3aa0e1fe865b',
                                    '3df549cdf08d8822ba58d3371e9c09540a875a6dff163c67121469ddcfaf30da')
        url = 'http://cloud.rovicorp.com/data/2/2.4/lookup/airing/' + str(airingId)
        return oAuthReqeuest.doRequestWithOAuth1(url)

    def detactProbId(self):
        scheduleJsonData = self.crawlScheduleInfo(50,4068851334, 1, 1)

        for schedule in scheduleJsonData['schedule']:
            airings = schedule['airings']
            for airing in airings:
                tempAiringsId = airing['ref']['id']
                stationId = airing['source']['ref']['id']
                airingInfo = self.crawAiringInfo(tempAiringsId)
                contentId = airingInfo['content']['ref']['id']
                jsonProbInfo = self.crawlProbIdInfo(contentId, stationId)
                self.analyseRvoiProgramId(contentId, jsonProbInfo, stationId)

    def staticsObjectTypeInfo(self):
        scheduleJsonData = self.crawlScheduleInfo(50, 4068851334, 1, 1)

        for schedule in scheduleJsonData['schedule']:
            airings = schedule['airings']
            for airing in airings:
                tempAiringsId = airing['ref']['id']
                stationId = airing['source']['ref']['id']
                airingInfo = self.crawAiringInfo(tempAiringsId)
                contentId = airingInfo['content']['ref']['id']
                jsonProbInfo = self.crawlProbIdInfo(contentId, stationId)
                self.statisticsObjectType(jsonProbInfo, tempAiringsId, contentId, stationId)
        for key in self.statistics:
            print key + ' : ' + self.statistics[key]

    statistics = {}
    def statisticsObjectType(self, jsonProbInfo, airingId, contentId, stationId):
        if (jsonProbInfo.has_key('hits')):
            for  hit in jsonProbInfo['hits']:
                if hit.has_key('objectType'):
                    if self.statistics.__contains__(hit['objectType']):
                        matchedValue = self.statistics[hit['objectType']]
                        matchedValue += 1
                        self.statistics[hit['objectType']] = matchedValue
                    else:
                        self.statistics[hit['objectType']] = 1

                    print str(airingId) + '|' + str(contentId) + '|' + str(stationId) + '|'  +hit['objectType']

    def analyseRvoiProgramId(self, contentId, jsonProbInfo, stationId):
        if jsonProbInfo.has_key('hits'):
            for hit in jsonProbInfo['hits']:
                if hit.has_key('altIds') and hit['altIds'].has_key('rovi.programId'):
                    print "we got programId in tivo: " + str(hit['altIds']['rovi.programId'])
                else:
                    print "we can't get programId in tivo " + 'contentId: ' + str(contentId) + ' | stationid:  ' + str(stationId)

                    # print 'contentId: '+ str(contentId) + ' | stationid:  ' + str(stationId) + json.dumps(self.crawlProbIdInfo(contentId,stationId))


if __name__ == '__main__':
    xxx = ProbIdDetection()
    xxx.staticsObjectTypeInfo()
